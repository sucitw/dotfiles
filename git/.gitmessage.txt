[Type] Short summary of changes introduced by this patch (<50-70 chars)
# type(scope): subject

# [Type]
# break: a breaking change such as removing a feature
# feat: a new feature
# fix: a bug fix
# docs: changes to documentation
# style: formatting, missing semi colons, etc; no code change
# refactor: refactoring production code
# test: adding tests, refactoring test; no production code change
# chore: updating dev-related maintenance files, build tasks, package manager configs, etc; no production code change

[Descriptions] Why (< 100 char lines)
#Most importantly, describe what is changed with the commit
#and not what is has not been working
#(that is part of the bug report already).
#
#More detailed explanatory text, if necessary. Wrap it to 74 characters.
#The first line is treated as the subject of the commit message and 
#the rest of the text as the body.  The blank line separating the 
#subject from the body is critical (unless you omit the body entirely); 
#tools like git rebase can get confused if you run the two together.
#
#Write your commit message in the '''imperative present tense'''
#("Fix bug", not "Fixed bug"). This convention matches up with generated 
#commit messages by commands like git merge and git revert.
#
#Help others to understand what you did (Motivation for the change?
#                                        Whats the difference to the previous version?), but keep it simple.
#
#Problem description as well as testing and/or reproduction instructions
#shall be part of the Forge ticket referenced below.
#The commit message solely describes '''what is changed'''.
#
# * Bullet points are okay, too
# * An asterisk is used for the bullet, it can be preceded by a single
#  space. This format is rendered correctly by Forge (redmine)
#  * Use a hanging indent
#
[Change-Id]: <some string generated by the git commit-msg hook>
#  Resolves: #12346
#  Related: #12340
#  Releases: master, 6.2

